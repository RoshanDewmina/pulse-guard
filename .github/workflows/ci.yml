name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run --filter='@tokiflow/web' lint

      - name: TypeScript type check
        run: bunx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma Client
        run: bun run db:generate

      - name: Run web app tests
        run: cd apps/web && npm test -- --coverage --passWithNoTests
        env:
          NODE_ENV: test

      - name: Run worker tests
        run: cd apps/worker && bun test --coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/coverage-final.json,./apps/worker/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: pulseguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma Client
        run: bun run db:generate

      - name: Run database migrations
        run: cd packages/db && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/pulseguard_test

      - name: Run integration tests
        run: cd apps/web && npm test -- --testPathPattern=integration --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/pulseguard_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret-for-ci-pipeline-only
          NEXTAUTH_URL: http://localhost:3000
          JWT_SECRET: test-jwt-secret-for-ci-pipeline

  build:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma Client
        run: bun run db:generate

      - name: Build web app
        run: bun run --filter='@tokiflow/web' build
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          NEXTAUTH_SECRET: build-time-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Build worker
        run: bun run --filter='@tokiflow/worker' build
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          REDIS_URL: redis://localhost:6379

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Run security audit
        run: bun audit || true

      - name: Check for vulnerable dependencies
        run: bunx audit-ci --moderate || true


