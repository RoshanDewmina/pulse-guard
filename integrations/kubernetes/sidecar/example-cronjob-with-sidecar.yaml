apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: production
  annotations:
    # Enable Saturn monitoring for this CronJob
    saturn.co/enabled: "true"
    # Grace period before marking as missed (seconds)
    saturn.co/grace-sec: "300"
    # Custom tags for organization
    saturn.co/tags: "production,database,backup"
spec:
  # Run daily at 2 AM
  schedule: "0 2 * * *"
  timeZone: "America/New_York"
  
  # Job history limits
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          
          # Init container: Send "start" ping to Saturn
          initContainers:
          - name: saturn-ping-start
            image: curlimages/curl:latest
            command:
            - sh
            - -c
            - |
              # Get monitor token from Saturn agent's annotation
              MONITOR_TOKEN=$(cat /saturn/monitor-token)
              curl -X POST "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=start"
            volumeMounts:
            - name: saturn-token
              mountPath: /saturn
              readOnly: true
          
          containers:
          # Main container: Your actual job
          - name: backup
            image: postgres:15
            command:
            - sh
            - -c
            - |
              set -e
              echo "Starting database backup..."
              
              # Your backup logic here
              pg_dump -h $DB_HOST -U $DB_USER $DB_NAME | gzip > /backups/backup-$(date +%Y%m%d-%H%M%S).sql.gz
              
              # Upload to S3 or other storage
              # aws s3 cp /backups/*.gz s3://my-backups/
              
              echo "Backup completed successfully"
              exit 0
            env:
            - name: DB_HOST
              value: "postgresql.default.svc.cluster.local"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username
            - name: DB_NAME
              value: "myapp"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password
            volumeMounts:
            - name: backups
              mountPath: /backups
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          
          # Sidecar container: Send completion ping to Saturn
          # This runs after the main container completes
          - name: saturn-ping-complete
            image: curlimages/curl:latest
            command:
            - sh
            - -c
            - |
              # Wait for main container to finish
              while true; do
                # Check if main container has finished
                if [ -f /shared/status ]; then
                  break
                fi
                sleep 2
              done
              
              # Get monitor token
              MONITOR_TOKEN=$(cat /saturn/monitor-token)
              
              # Get exit code and duration
              EXIT_CODE=$(cat /shared/exit-code)
              DURATION_MS=$(cat /shared/duration-ms)
              
              # Send appropriate ping
              if [ $EXIT_CODE -eq 0 ]; then
                curl -X POST "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=success&durationMs=${DURATION_MS}"
              else
                curl -X POST "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=fail&exitCode=${EXIT_CODE}&durationMs=${DURATION_MS}"
              fi
            volumeMounts:
            - name: saturn-token
              mountPath: /saturn
              readOnly: true
            - name: shared
              mountPath: /shared
              readOnly: true
          
          volumes:
          # Shared volume for passing status between containers
          - name: shared
            emptyDir: {}
          
          # Volume for storing Saturn monitor token
          # This is injected by the Saturn agent via a mutating webhook
          - name: saturn-token
            secret:
              secretName: saturn-monitor-token-database-backup
          
          # Volume for storing backups (temporary)
          - name: backups
            emptyDir: {}

---
# Alternative: Simple sidecar with wrapper script
apiVersion: batch/v1
kind: CronJob
metadata:
  name: api-health-check
  namespace: production
  annotations:
    saturn.co/enabled: "true"
    saturn.co/grace-sec: "60"
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: health-check
            image: alpine:latest
            command:
            - /bin/sh
            - -c
            - |
              # Saturn wrapper script
              MONITOR_TOKEN="${SATURN_MONITOR_TOKEN}"
              START_TIME=$(date +%s%3N)
              
              # Send start ping
              wget -qO- --post-data="" "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=start" || true
              
              # Run the actual job
              set +e
              # Your job logic here
              wget --spider --timeout=10 https://api.example.com/health
              EXIT_CODE=$?
              set -e
              
              # Calculate duration
              END_TIME=$(date +%s%3N)
              DURATION=$((END_TIME - START_TIME))
              
              # Send completion ping
              if [ $EXIT_CODE -eq 0 ]; then
                wget -qO- --post-data="" "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=success&durationMs=${DURATION}"
              else
                wget -qO- --post-data="" "https://saturn.co/api/ping/${MONITOR_TOKEN}?state=fail&exitCode=${EXIT_CODE}&durationMs=${DURATION}"
              fi
              
              exit $EXIT_CODE
            env:
            - name: SATURN_MONITOR_TOKEN
              valueFrom:
                secretKeyRef:
                  name: saturn-monitor-token-api-health-check
                  key: token

---
# Advanced: Using a dedicated Saturn sidecar image
apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-processing
  namespace: production
  annotations:
    saturn.co/enabled: "true"
    saturn.co/grace-sec: "600"  # 10 minutes
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            # Automatically inject Saturn sidecar
            saturn.co/inject-sidecar: "true"
        spec:
          restartPolicy: OnFailure
          
          # Shared process namespace enables sidecar to monitor main container
          shareProcessNamespace: true
          
          containers:
          - name: processor
            image: myapp/data-processor:latest
            command:
            - python
            - /app/process.py
            env:
            - name: DATA_SOURCE
              value: "s3://my-bucket/data"
            resources:
              requests:
                memory: "1Gi"
                cpu: "500m"
              limits:
                memory: "2Gi"
                cpu: "2"
          
          # Saturn sidecar (auto-injected by webhook or manually defined)
          - name: saturn-sidecar
            image: saturn/k8s-sidecar:latest
            env:
            - name: SATURN_MONITOR_TOKEN
              valueFrom:
                secretKeyRef:
                  name: saturn-monitor-token-data-processing
                  key: token
            - name: SATURN_MAIN_CONTAINER
              value: "processor"
            - name: SATURN_CAPTURE_OUTPUT
              value: "true"
            resources:
              requests:
                memory: "32Mi"
                cpu: "10m"
              limits:
                memory: "64Mi"
                cpu: "50m"

