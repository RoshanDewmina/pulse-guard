generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AlertChannel {
  id         String      @id
  orgId      String
  type       ChannelType
  label      String
  configJson Json
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  Org        Org         @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ApiKey {
  id         String    @id
  userId     String
  orgId      String
  name       String
  tokenHash  String    @unique
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  Org        Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
}

model AuditLog {
  id        String   @id
  orgId     String
  userId    String?
  action    String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())
  Org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([orgId])
  @@index([userId])
}

model Incident {
  id             String          @id
  monitorId      String
  status         IncidentStatus  @default(OPEN)
  kind           IncidentKind
  openedAt       DateTime        @default(now())
  acknowledgedAt DateTime?
  resolvedAt     DateTime?
  summary        String
  details        String?
  lastAlertedAt  DateTime?
  dedupeHash     String?
  suppressUntil  DateTime?
  slackMessageTs String?
  slackChannelId String?
  maintenanceWindowId String?
  Monitor        Monitor         @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  MaintenanceWindow MaintenanceWindow? @relation(fields: [maintenanceWindowId], references: [id], onDelete: SetNull)
  IncidentEvent  IncidentEvent[]
  PostMortem     PostMortem[]

  @@index([dedupeHash])
  @@index([monitorId])
  @@index([status])
}

model IncidentEvent {
  id         String   @id
  incidentId String
  eventType  String
  message    String?
  metadata   Json?
  createdAt  DateTime @default(now())
  Incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
}

model Membership {
  id        String   @id
  userId    String
  orgId     String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime
  Org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model Monitor {
  id                        String             @id
  orgId                     String
  name                      String
  token                     String             @unique
  scheduleType              ScheduleType
  intervalSec               Int?
  cronExpr                  String?
  timezone                  String             @default("UTC")
  graceSec                  Int                @default(300)
  status                    MonitorStatus      @default(OK)
  lastRunAt                 DateTime?
  lastDurationMs            Int?
  lastExitCode              Int?
  lastOutputKey             String?
  nextDueAt                 DateTime?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime
  captureOutput             Boolean            @default(false)
  captureLimitKb            Int                @default(32)
  durationCount             Int                @default(0)
  durationMean              Float?
  durationM2                Float?
  durationMin               Int?
  durationMax               Int?
  durationMedian            Float?
  checkSsl                  Boolean            @default(false)
  sslAlertThresholds        Int[]              @default([30, 14, 7])
  checkDomain               Boolean            @default(false)
  domainAlertThresholds     Int[]              @default([60, 30, 14])
  // Anomaly detection tuning
  anomalyZScoreThreshold    Float?             @default(3.0)
  anomalyMedianMultiplier   Float?             @default(5.0)
  anomalyOutputDropFraction Float?             @default(0.5)
  // HTTP monitoring fields
  monitorType               MonitorType        @default(HEARTBEAT)
  httpMethod                HttpMethod?        @default(GET)
  httpHeaders               Json?              // Custom headers as JSON
  httpBody                  String?            // Request body for POST/PUT
  expectedStatusCode        Int?               @default(200)
  responseAssertions        Json?              // Assertions as JSON array
  responseTimeSla           Int?               // Max response time in ms
  Incident                  Incident[]
  Org                       Org                @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Run                       Run[]
  SslCertificate            SslCertificate[]
  DomainExpiration          DomainExpiration[]
  SlaReport                 SlaReport[]
  MonitorTag                MonitorTag[]

  @@index([nextDueAt])
  @@index([orgId])
  @@index([status])
  @@index([token])
}

model Org {
  id               String             @id
  name             String
  slug             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  AlertChannel     AlertChannel[]
  ApiKey           ApiKey[]
  AuditLog         AuditLog[]
  Membership       Membership[]
  Monitor          Monitor[]
  Rule             Rule[]
  StatusPage       StatusPage[]
  SubscriptionPlan SubscriptionPlan?
  SyntheticMonitor SyntheticMonitor[]
  SlaReport        SlaReport[]
  PostMortem       PostMortem[]
  Tag              Tag[]
  MaintenanceWindow MaintenanceWindow[]
  SAMLConfig       SAMLConfig?
}

model Rule {
  id              String   @id
  orgId           String
  name            String
  monitorIds      String[] @default([])
  channelIds      String[] @default([])
  suppressMinutes Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Org             Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model Run {
  id         String     @id
  monitorId  String
  startedAt  DateTime
  finishedAt DateTime?
  durationMs Int?
  exitCode   Int?
  outcome    RunOutcome
  outputKey  String?
  sizeBytes  Int?
  createdAt  DateTime   @default(now())
  Monitor    Monitor    @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
  @@index([startedAt])
}

model StatusPage {
  id           String   @id
  orgId        String
  slug         String   @unique
  title        String
  isPublic     Boolean  @default(true)
  customDomain String?
  accessToken  String
  components   Json     @default("[]")
  theme        Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Org          Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([slug])
}

model SubscriptionPlan {
  id               String   @id
  orgId            String   @unique
  stripeCustomerId String?  @unique
  stripeSubId      String?  @unique
  plan             String   @default("FREE")
  monitorLimit     Int      @default(5)
  userLimit        Int      @default(3)
  statusPageLimit  Int      @default(1)
  syntheticRunsLimit Int    @default(200)
  syntheticRunsUsed Int     @default(0)
  retentionDays    Int      @default(30)
  minIntervalSec   Int      @default(600)
  allowsWebhooks   Boolean  @default(false)
  allowsCustomDomains Boolean @default(false)
  allowsSso        Boolean  @default(false)
  allowsAuditLogs  Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  Org              Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String?
  emailVerified       DateTime?
  image               String?
  onboardingCompleted Boolean        @default(false)
  onboardingStep      OnboardingStep @default(NONE)
  // MFA/2FA fields
  mfaEnabled          Boolean        @default(false)
  mfaTotpSecretEnc    String? // Encrypted TOTP secret
  mfaBackupCodesEnc   String? // Encrypted JSON array of hashed backup codes
  mfaLastVerifiedAt   DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Account             Account[]
  ApiKey              ApiKey[]
  AuditLog            AuditLog[]
  DataExport          DataExport[]
  Membership          Membership[]
  Session             Session[]
}

model DataExport {
  id          String           @id @default(cuid())
  userId      String
  status      DataExportStatus @default(PENDING)
  s3Key       String?
  downloadUrl String?
  fileSize    Int?
  expiresAt   DateTime
  completedAt DateTime?
  failedAt    DateTime?
  errorMsg    String?
  createdAt   DateTime         @default(now())
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model SslCertificate {
  id              String    @id @default(cuid())
  monitorId       String
  domain          String
  issuer          String?
  subject         String?
  issuedAt        DateTime?
  expiresAt       DateTime
  daysUntilExpiry Int
  isValid         Boolean   @default(true)
  isSelfSigned    Boolean   @default(false)
  chainValid      Boolean   @default(true)
  validationError String?
  serialNumber    String?
  fingerprint     String?
  lastCheckedAt   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Monitor         Monitor   @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
  @@index([expiresAt])
  @@index([daysUntilExpiry])
  @@index([lastCheckedAt])
}

model DomainExpiration {
  id              String    @id @default(cuid())
  monitorId       String
  domain          String
  registrar       String?
  registeredAt    DateTime?
  expiresAt       DateTime
  daysUntilExpiry Int
  autoRenew       Boolean?
  nameservers     String[]  @default([])
  status          String[]  @default([])
  whoisServer     String?
  lastCheckedAt   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Monitor         Monitor   @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
  @@index([expiresAt])
  @@index([daysUntilExpiry])
  @@index([lastCheckedAt])
}

model SyntheticMonitor {
  id              String              @id @default(cuid())
  orgId           String
  name            String
  url             String
  description     String?
  isEnabled       Boolean             @default(true)
  intervalMinutes Int                 @default(5)
  timeout         Int                 @default(30000)
  viewport        Json?
  userAgent       String?
  headers         Json?
  cookies         Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  lastRunAt       DateTime?
  lastStatus      SyntheticRunStatus?
  Org             Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)
  SyntheticStep   SyntheticStep[]
  SyntheticRun    SyntheticRun[]

  @@index([orgId])
  @@index([isEnabled])
  @@index([lastRunAt])
}

model SyntheticStep {
  id                  String                @id @default(cuid())
  syntheticMonitorId  String
  order               Int
  type                SyntheticStepType
  label               String
  selector            String?
  value               String?
  url                 String?
  timeout             Int                   @default(5000)
  screenshot          Boolean               @default(false)
  optional            Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  SyntheticMonitor    SyntheticMonitor      @relation(fields: [syntheticMonitorId], references: [id], onDelete: Cascade)
  SyntheticStepResult SyntheticStepResult[]

  @@index([syntheticMonitorId])
  @@index([order])
}

model SyntheticRun {
  id                  String                @id @default(cuid())
  syntheticMonitorId  String
  status              SyntheticRunStatus    @default(RUNNING)
  startedAt           DateTime              @default(now())
  completedAt         DateTime?
  durationMs          Int?
  errorMessage        String?
  screenshots         Json?
  createdAt           DateTime              @default(now())
  SyntheticMonitor    SyntheticMonitor      @relation(fields: [syntheticMonitorId], references: [id], onDelete: Cascade)
  SyntheticStepResult SyntheticStepResult[]

  @@index([syntheticMonitorId])
  @@index([startedAt])
  @@index([status])
}

model SyntheticStepResult {
  id              String              @id @default(cuid())
  syntheticRunId  String
  syntheticStepId String
  status          SyntheticStepStatus @default(PENDING)
  startedAt       DateTime            @default(now())
  completedAt     DateTime?
  durationMs      Int?
  errorMessage    String?
  screenshot      String?
  createdAt       DateTime            @default(now())
  SyntheticRun    SyntheticRun        @relation(fields: [syntheticRunId], references: [id], onDelete: Cascade)
  SyntheticStep   SyntheticStep       @relation(fields: [syntheticStepId], references: [id], onDelete: Cascade)

  @@index([syntheticRunId])
  @@index([syntheticStepId])
}

model SlaReport {
  id                  String       @id @default(cuid())
  orgId               String
  monitorId           String?
  name                String
  period              ReportPeriod
  startDate           DateTime
  endDate             DateTime
  generatedAt         DateTime     @default(now())
  generatedBy         String?
  uptimePercentage    Float
  totalChecks         Int
  successfulChecks    Int
  failedChecks        Int
  totalDowntimeMs     Int
  mttr                Int?
  mtbf                Int?
  incidentCount       Int
  averageResponseTime Float?
  p95ResponseTime     Float?
  p99ResponseTime     Float?
  data                Json
  pdfUrl              String?
  createdAt           DateTime     @default(now())
  Org                 Org          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Monitor             Monitor?     @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([monitorId])
  @@index([startDate])
  @@index([endDate])
  @@index([generatedAt])
}

model PostMortem {
  id           String           @id @default(cuid())
  orgId        String
  incidentId   String
  title        String
  summary      String
  impact       String?
  rootCause    String?
  timeline     Json
  actionItems  Json
  contributors String[]         @default([])
  status       PostMortemStatus @default(DRAFT)
  publishedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    String
  Org          Org              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Incident     Incident         @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([incidentId])
  @@index([status])
  @@index([publishedAt])
  @@index([createdAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id         String       @id @default(cuid())
  orgId      String
  name       String
  color      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Org        Org          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  MonitorTag MonitorTag[]

  @@unique([orgId, name])
  @@index([orgId])
}

model MonitorTag {
  monitorId String
  tagId     String
  Monitor   Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  Tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([monitorId, tagId])
  @@index([monitorId])
  @@index([tagId])
}

model MaintenanceWindow {
  id          String                    @id @default(cuid())
  orgId       String
  name        String
  description String?
  startAt     DateTime
  endAt       DateTime
  isActive    Boolean                  @default(false)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime
  Org         Org                      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Incidents   Incident[]

  @@index([orgId])
  @@index([startAt, endAt])
  @@index([isActive])
}

model SAMLConfig {
  id                String   @id @default(cuid())
  orgId             String   @unique
  name              String
  idpUrl            String
  idpCert           String   @db.Text
  spCert            String   @db.Text
  spKey             String   @db.Text
  spEntityId        String
  acsUrl            String
  sloUrl            String?
  nameIdFormat      String   @default("urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress")
  attributeMapping  Json?
  isEnabled         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Org               Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

enum ChannelType {
  EMAIL
  SLACK
  DISCORD
  WEBHOOK
  PAGERDUTY
  TEAMS
  SMS
}

enum MonitorType {
  HEARTBEAT
  HTTP_CHECK
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

enum IncidentKind {
  MISSED
  LATE
  FAIL
  ANOMALY
}

enum IncidentStatus {
  OPEN
  ACKED
  RESOLVED
}

enum MonitorStatus {
  OK
  LATE
  MISSED
  FAILING
  DISABLED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum RunOutcome {
  STARTED
  SUCCESS
  FAIL
  TIMEOUT
  LATE
  MISSED
}

enum ScheduleType {
  INTERVAL
  CRON
}

enum DataExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

enum SyntheticStepType {
  NAVIGATE
  CLICK
  FILL
  SELECT
  WAIT
  SCREENSHOT
  ASSERTION
  CUSTOM_SCRIPT
}

enum SyntheticRunStatus {
  RUNNING
  SUCCESS
  FAILED
  TIMEOUT
  CANCELLED
}

enum SyntheticStepStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  SKIPPED
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum PostMortemStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
  ARCHIVED
}

enum OnboardingStep {
  NONE
  STARTED
  MONITOR_CREATED
  ALERT_CONNECTED
  TEST_ALERT
  DONE
}
