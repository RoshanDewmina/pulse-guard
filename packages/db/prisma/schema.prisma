generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String   @id
  userId       String
  provider     String
  providerId   String
  accessToken  String
  refreshToken String?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model AlertChannel {
  id         String      @id
  orgId      String
  type       ChannelType
  label      String
  configJson Json
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  Org        Org         @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ApiKey {
  id         String    @id
  userId     String
  orgId      String
  name       String
  tokenHash  String    @unique
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  Org        Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([userId])
}

model AuditLog {
  id        String   @id
  orgId     String
  userId    String?
  action    String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())
  Org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([orgId])
  @@index([userId])
}

model Incident {
  id             String          @id
  monitorId      String
  status         IncidentStatus  @default(OPEN)
  kind           IncidentKind
  openedAt       DateTime        @default(now())
  acknowledgedAt DateTime?
  resolvedAt     DateTime?
  summary        String
  details        String?
  lastAlertedAt  DateTime?
  dedupeHash     String?
  suppressUntil  DateTime?
  slackMessageTs String?
  slackChannelId String?
  Monitor        Monitor         @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  IncidentEvent  IncidentEvent[]

  @@index([dedupeHash])
  @@index([monitorId])
  @@index([status])
}

model IncidentEvent {
  id         String   @id
  incidentId String
  eventType  String
  message    String?
  metadata   Json?
  createdAt  DateTime @default(now())
  Incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
}

model Membership {
  id        String   @id
  userId    String
  orgId     String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime
  Org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model Monitor {
  id              String        @id
  orgId           String
  name            String
  token           String        @unique
  scheduleType    ScheduleType
  intervalSec     Int?
  cronExpr        String?
  timezone        String        @default("UTC")
  graceSec        Int           @default(300)
  status          MonitorStatus @default(OK)
  lastRunAt       DateTime?
  lastDurationMs  Int?
  lastExitCode    Int?
  lastOutputKey   String?
  nextDueAt       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  tags            String[]      @default([])
  captureOutput   Boolean       @default(false)
  captureLimitKb  Int           @default(32)
  durationCount   Int           @default(0)
  durationMean    Float?
  durationM2      Float?
  durationMin     Int?
  durationMax     Int?
  durationMedian  Float?
  Incident        Incident[]
  Org             Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Run             Run[]

  @@index([nextDueAt])
  @@index([orgId])
  @@index([status])
  @@index([token])
}

model Org {
  id               String            @id
  name             String
  slug             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  AlertChannel     AlertChannel[]
  ApiKey           ApiKey[]
  AuditLog         AuditLog[]
  Membership       Membership[]
  Monitor          Monitor[]
  Rule             Rule[]
  StatusPage       StatusPage[]
  SubscriptionPlan SubscriptionPlan?
}

model Rule {
  id              String   @id
  orgId           String
  name            String
  monitorIds      String[] @default([])
  channelIds      String[] @default([])
  suppressMinutes Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Org             Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model Run {
  id         String     @id
  monitorId  String
  startedAt  DateTime
  finishedAt DateTime?
  durationMs Int?
  exitCode   Int?
  outcome    RunOutcome
  outputKey  String?
  sizeBytes  Int?
  createdAt  DateTime   @default(now())
  Monitor    Monitor    @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
  @@index([startedAt])
}

model StatusPage {
  id           String   @id
  orgId        String
  slug         String   @unique
  title        String
  isPublic     Boolean  @default(true)
  customDomain String?
  accessToken  String
  components   Json     @default("[]")
  theme        Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Org          Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([slug])
}

model SubscriptionPlan {
  id               String   @id
  orgId            String   @unique
  stripeCustomerId String?  @unique
  stripeSubId      String?  @unique
  plan             String   @default("FREE")
  monitorLimit     Int      @default(5)
  userLimit        Int      @default(3)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  Org              Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
}

model User {
  id         String       @id
  email      String       @unique
  name       String?
  imageUrl   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Account    Account[]
  ApiKey     ApiKey[]
  AuditLog   AuditLog[]
  Membership Membership[]
}

enum ChannelType {
  EMAIL
  SLACK
  DISCORD
  WEBHOOK
}

enum IncidentKind {
  MISSED
  LATE
  FAIL
  ANOMALY
}

enum IncidentStatus {
  OPEN
  ACKED
  RESOLVED
}

enum MonitorStatus {
  OK
  LATE
  MISSED
  FAILING
  DISABLED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum RunOutcome {
  STARTED
  SUCCESS
  FAIL
  TIMEOUT
  LATE
  MISSED
}

enum ScheduleType {
  INTERVAL
  CRON
}
